Matthieu
--------

* [doc] Fix missing reference warnings. (See build/html/WARNINGS.log)
* use pycrt.coerce() where it makes sense. [PDS only]
* use **kwargs to simplify signatures



Sepand
------

* Solver Tests
    Remaining: opt/solver/pds.py
* Refactor docstrings, type hints, etc.
    Remaining: opt/solver/pds.py
* Known Bugs
  * General
    * test_svdvals[SM, non-rectangular operators]
      Returned values always wrong (esp. for fat arrays).
      Probable cause: np.linalg.svd does not return the "true" singular values.
  * Stencil
    * test_value1D_svdvals[SM]
      Always incorrect for ND kernels (seperable & non-seperable)
      Did an experiment on NumPy backend:
        Changing svds() seed gives different results.
        Hunch: obtaining one of the smallest singular values, but not the smallest.
      Values are not extravagant however: the failure is acceptable.
    * test_valueND_adjoint_dagger()
      Did not investigate yet.
  * NUFFT
    * type[123]()
      Some tests fail only with DASK inputs.
      Reason unknown.
* Test Suite Enhancements
  * General
    * Add @slow_test tags.
    * Add alternative tox instance to run non-@slow_test tests.
    * Add DASK_CUPY mode.
      [Only to the test suite. Need to figure out how to introduce /w breaking deps.py]
  * NUFFT
    * CuPy backend currently not tested since only kicks in/works when eps=0.
      Enable CuPy backend once eps>0 case also becomes CuPy-capable.
    * `modeord` is not tested

   

Joan
----

* [opt] Implement LSQR LSMR
* Add SVG drawing of class diagrams in documentation
* create benchmark suite for all operators.

  We must track the runtime of operator methods across commits to identify performance regressions and fix them. A comprehensive benchmark suite is therefore required.

  Desired output: DataFrame with
  * row: class.method
  * column: commit name
  * value: execution time [s] (on sample data, identical throughout the commit history.)

  This data can then be plotted to visualize performance changes.


  Roadmap:
  - Numpy ufuncs -> Kaan
  - operators (Pycsou v1) -> core dev team
  - functionals (Pycsou v1 but unify loss and reg with 1 class and method "asloss") -> Kaan
  - Tutorials, examples and notebooks. -> Kaan
  - CI: pip/conda packaging (quick fix of pip lenghty install) + ReadTheDocs + Run tests in cloud (Infomaniak)
  - benchmarking suite (low priority)
  - Automatic hyperparameter tuning (hyperpriors) 
  - Uncertainty quantification (approximate credibility intervals)
  - Nonconvex/linear (APGD nonconvex + PDS nonlinear)
  - Pytorch interfacing (autodiff+jac+bwd eval) -> Alec
  - Stochastic solvers -> Alec
  - Second order solvers -> Kaan
  - LSQR/LSMR -> Kaan



Daniele
-------
